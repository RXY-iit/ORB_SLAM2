%YAML:1.0

#--------------------------------------------------------------------------------------------
# Camera Parameters. Adjust them!
#--------------------------------------------------------------------------------------------

# Camera calibration and distortion parameters (OpenCV) 

Camera.fx: 1421.51354
Camera.fy: 1419.94541
Camera.cx: 929.738660
Camera.cy: 606.275012

Camera.k1: -0.13786277
Camera.k2: 0.17211554
Camera.p1: -0.00173524
Camera.p2: -0.00042288
Camera.k3: -0.09129849

# Camera resolution
Camera.width: 1920
Camera.height: 1200

# Camera frames per second 
Camera.fps: 30.0

# Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)
Camera.RGB: 0

# # Close/Far threshold. Baseline times.
# ThDepth: 35.0

#--------------------------------------------------------------------------------------------
# ORB Parameters
#--------------------------------------------------------------------------------------------

# ORB Extractor: Number of features per image
ORBextractor.nFeatures: 2000

# ORB Extractor: Scale factor between levels in the scale pyramid 	
ORBextractor.scaleFactor: 1.3

# ORB Extractor: Number of levels in the scale pyramid	
ORBextractor.nLevels: 8

# ORB Extractor: Fast threshold
# Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.
# Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST
# You can lower these values if your images have low contrast			
ORBextractor.iniThFAST: 20
ORBextractor.minThFAST: 8

#--------------------------------------------------------------------------------------------
# Viewer Parameters
#--------------------------------------------------------------------------------------------
Viewer.KeyFrameSize: 0.05
Viewer.KeyFrameLineWidth: 1
Viewer.GraphLineWidth: 0.9
Viewer.PointSize: 2
Viewer.CameraSize: 0.08
Viewer.CameraLineWidth: 3
Viewer.ViewpointX: 0
Viewer.ViewpointY: -0.7
Viewer.ViewpointZ: -1.8
Viewer.ViewpointF: 300

# #--------------------------------------------------------------------------------------------
# # Save Trajectory Parameters
# #--------------------------------------------------------------------------------------------
# SLAM.SaveKeyFrameTrajectoryTUM: "/home/ruan-x/Documents/save_data/KeyFrameTrajectory.txt"
# SLAM.SaveTrajectoryTUM: "/home/ruan-x/Documents/save_data/CameraTrajectory.txt"
# SLAM.SaveMonocularTrajectory: "/home/ruan-x/Documents/save_data/MonocularTrajectory.txt"

# #--------------------------------------------------------------------------------------------
# # Save Map Points Parameters
# #--------------------------------------------------------------------------------------------
# SLAM.SaveMapPoints: "/home/ruan-x/Documents/save_data/MapPoints.txt"

# 方案1: 如果您知道真实运动距离，可以进行尺度恢复
# scale = real_distance / estimated_distance  # 真实距离/估计距离
# trajectory_scaled = trajectory * scale

# # 方案2: 使用先验信息进行尺度恢复
# # 如果知道相机高度或其他实际物体尺寸
# def recover_scale(trajectory, known_height):
#     # 使用已知高度来计算尺度
#     scale = known_height / trajectory[:, 2].max()
#     return trajectory * scale
